using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace LeetcodeMinimumJumpsToReachHome.UnitTests
{
    [TestClass]
    public class MinimumJumpsTests
    {
        private Solution _solution;

        [TestInitialize]
        public void Setup()
        {
            _solution = new Solution();
        }

        [TestMethod]
        public void MinimumJumps_Returns_3()
        {
            var forbidden = new int[] { 14, 4, 18, 1, 15 };
            int a = 3, b = 15, x = 9;

            Assert.AreEqual(3, _solution.MinimumJumps(forbidden, a, b, x));
        }


        [TestMethod]
        public void MinimumJumps_Returns_2()
        {
            var forbidden = new int[] { 1, 6, 2, 14, 5, 17, 4 };
            int a = 16, b = 9, x = 7;

            Assert.AreEqual(2, _solution.MinimumJumps(forbidden, a, b, x));
        }


        [TestMethod]
        public void MinimumJumps_Returns_Negative_1()
        {
            var forbidden = new int[] { 18, 13, 3, 9, 8, 14 };
            int a = 3, b = 8, x = 6;

            Assert.AreEqual(-1, _solution.MinimumJumps(forbidden, a, b, x));
        }


        [TestMethod]
        public void MinimumJumps_Returns_121()
        {
            var forbidden = new int[]
            {
                162, 118, 178, 152, 167, 100, 40, 74, 199, 186, 26, 73, 200, 127,
                30, 124, 193, 84, 184, 36, 103, 149, 153, 9, 54, 154, 133, 95,
                45, 198, 79, 157, 64, 122, 59, 71, 48, 177, 82, 35, 14, 176, 16,
                108, 111, 6, 168, 31, 134, 164, 136, 72, 98
            };

            int a = 29;
            int b = 98;
            int x = 80;

            Assert.AreEqual(121, _solution.MinimumJumps(forbidden, a, b, x));
        }


        [TestMethod]
        public void MinimumJumps_Returns_3998()
        {
            var forbidden = new int[]
            {
                1998
            };

            int a = 1999;
            int b = 2000;
            int x = 2000;

            Assert.AreEqual(3998, _solution.MinimumJumps(forbidden, a, b, x));
        }


        [TestMethod]
        public void MinimumJumps_Returns_1036()
        {
            var forbidden = new int[]
            {
                1362, 873, 1879, 725, 305, 794, 1135, 1358, 1717, 159, 1370, 1861, 583, 1193, 1921, 778, 1263, 239,
                1224, 1925, 1505, 566, 5, 15
            };

            int a = 560;
            int b = 573;
            int x = 64;

            Assert.AreEqual(1036, _solution.MinimumJumps(forbidden, a, b, x));
        }

        [TestMethod]
        public void MinimumJumps_Returns_120()
        {
            var forbidden = new int[]
            {
                1401, 832, 1344, 173, 1529, 1905, 1732, 277, 1490, 650, 1577, 1886, 185, 1728, 1827, 1924,
                1723, 1034, 1839, 1722, 1673, 1198, 1667, 538, 911, 1221, 1201, 1313, 251, 752, 40, 1378,
                1515, 1789, 1580, 1422, 907, 1536, 294, 1677, 1807, 1419, 1893, 654, 1176, 812, 1094, 1942,
                876, 777, 1850, 1382, 760, 347, 112, 1510, 1278, 1607, 1491, 429, 1902, 1891, 647, 1560,
                1569, 196, 539, 836, 290, 1348, 479, 90, 1922, 111, 1411, 1286, 1362, 36, 293, 1349, 667,
                430, 96, 1038, 793, 1339, 792, 1512, 822, 269, 1535, 1052, 233, 1835, 1603, 577, 936, 1684,
                1402, 1739, 865, 1664, 295, 977, 1265, 535, 1803, 713, 1298, 1537, 135, 1370, 748, 448, 254,
                1798, 66, 1915, 439, 883, 1606, 796
            };

            int a = 19;
            int b = 18;
            int x = 1540;

            Assert.AreEqual(120, _solution.MinimumJumps(forbidden, a, b, x));
        }

        public void MinimumJumps_Returns_Zero()
        {

            var forbidden = new int[]
            {
                621, 1511, 1328, 1602, 414, 1084, 685, 408, 1547, 1454, 1138, 1091, 1624, 871, 1625, 985, 428,
                1116, 475, 1875, 583, 1762, 1448, 151, 1869, 1651, 1590, 1193, 221, 797, 691, 17, 1027, 1101,
                347, 1085, 1475, 1021, 1194, 1787, 1830, 652, 1177, 2000, 279, 1782, 886, 1489, 176, 514, 766,
                1758, 696, 651, 31, 1828, 1606, 784, 914, 1213, 1848, 1490, 978, 1992, 1617, 276, 1311,
                1288, 882, 469, 1457, 803, 795, 222, 851, 528, 662, 179, 1449, 1414, 1960, 809, 1781, 722,
                1613, 1738, 378, 1199, 848, 575, 24, 1644, 1706, 1521, 744, 1353, 1403, 1835, 965, 745, 446,
                336, 1324, 191, 1172, 65, 1063, 569, 1542, 1844, 831, 844, 355, 748, 920, 562, 1204, 353, 632,
                1953, 1999, 1381, 573, 512, 421, 1323, 321, 1966, 1890, 788, 1540, 864, 1609, 177, 131, 337,
                1819, 1169, 1641, 1279, 612, 76, 1263, 885, 1341, 1982, 1307, 1837, 1838, 1483, 1836, 791,
                1637, 303, 1484, 1577, 1544, 717, 681, 1571, 1595, 1650, 189, 1912, 698, 726, 1740, 1653, 174,
                794, 1067, 594, 518, 686, 1938, 590, 1665, 833, 1568, 1543, 556, 665, 906, 487, 1906, 1620, 210,
                646, 1569, 1296, 1130, 626, 452, 1206, 1163, 120, 740, 269, 129, 1859, 166, 1701, 989, 1382, 56,
                1303, 933, 1549, 550, 258, 589, 300, 1271, 1536, 489, 60, 1097, 1494, 367, 1840, 1212, 1899, 1477,
                1392, 1286, 661, 1429, 322, 140, 596, 1945, 1038, 713, 233, 1006, 813, 968, 1240
            };

            int a = 7;
            int b = 14;
            int x = 0;

            Assert.AreEqual(0, _solution.MinimumJumps(forbidden, a, b, x));
        }


        [TestMethod]
        public void MinimumJumps_Returns_11()
        {
            var forbidden = new[]
            {
                1877,929,1225,328,17,1362,1501,1869,209,1807,1679,1546,1761,1007,537,137,1463,252,715,757,1786,
                299,652,215,138,1160,1500,23,1301,504,1697,816,242,782,942,157,1555,1853,523,1582,380,640,1105,
                55,610,1568,905,1874,431,608,419,928,530,875,10,1744,999,1518,1569,148,563,88,1823,1315,238,1347,
                193,1749,1468,277,285,294,371,112,1760,1122,84,1288,1981,1021,234,580,444,1180,1297,1482,1813,1253,
                896,692,1993,1866,616,1108,1949,1333,1439,306,332,293,788,383,998,1487,739,727,1120,1293,124,1106,
                1358,818,1126,1391,1881,1531,1363,1372,741,437,139,1903,752,1669,1026,749,1025,753,429,395,1433,
                1480,1296,1571,1513,598,1830,161,645,1966,1659,163,579,1128,1883,123,1496,362,87,317,721,1808,1851,
                966,1243,1044,261,1149,487,622,1176,836,1730,733,296,775,160,1195,819,1467,1715,540,1472,1801,1970,
                1528,736,709,1247,1130,376,1088,670,25,1292,834,1922,71,1116,1530,704,1032,451,329,829,1216,1776,
                1781,1634,312,77,108,50,1474,794,984,267,246,1956,1920,62,901,105,756,776,468,1182,1665,781,1583,
                149,631,686,1895,446,1434,873,1613,732,581,659,490,1419,1398,773,20,797,906,153,1996,22,1720,1712,
                1899,401,941,493,826,1562,1906,1326,1364,80,127,158,1633,606,244,861,1000,1367,1231,1196,649,1069,
                230,1172,1978,1893,1457,1658,1510,1413,1511,151,1263,1586,39,1764,1608,1022,630,959,344,1157,518,
                726,217,680,1703,396,964,1221,615,557,1788,445,566,950,644,284,1590,1258,1091,239,1700,338,1107,
                1870,455,1912,1424,1112,654,1005,1102,1306,612,1850,1945,283,1232,1048,1417,279,1431,462,1260,1990,
                1261,1635,791,708,568,899,1998,473,1393,1437,1445,422,1580,1557,638,175,1493,908,90,301,1041,511,
                1951,617,1527,1224,421,983,181,1385,893,1064,100,1696,1641,1637,1731,436,226,604,628,458,1138,1907,
                953,1792,699,492,509,1029,205,1035,9,480,83,1533,5,1963,1167,1337,366,503,1462,494,1191,222,558,1002,
                35,1736,1932,360,427,221,1514,790,1071,1365,1282,156,356,1187,689,742,472,771,1565,1379,199,1928,91,
                1096,1137,342,987,1086,1599,1287,260,985,1498,695,688,1207,6,1458,780,1547,440,1038,1410,1821,384,1279,
                1865,1483,456,387,1003,567,769,1558,1141,1787,1935,994,731,402,804,1082,1917,2000,1972,481,592,337,1387,
                1537,1428,548,1989,1572,1857,192,848,1010,812,1692,831,1742,614,1825,330,1636,1223,1839,1311,250,981,874,
                1202,195,1401,720,764,718,358,1618,972,206,1847,1994,1673,287,1773,897,1952,198,1844,1199,1414,109,586,
                1515,866,821,348,977,1506,1089,204,58,1095,1524,1526,1882,730,508,1189,355,273,515,1678,1575,1538,467,
                1308,478,1163,391,710,1144,1127,94,201,272,660,538,954,936,196,935,1647,1348,485,1043,1077,1795,1011,562,
                190,817,1867,1356,97,1621,1890,1504,133,1076,1902,1570,1323,1856,240,888,1092,1732,575,827,1508,1944,1585,
                762,340,1219,1793,1769,1156,1628,1040,107,1227,81,345,1217,697,668,96,912,701,1360,1034,319,1113,1717,1255,
                843,989,1897,405,53,1252,1491,1061,1375,1335,110,1798,1581,1632,393,1304,813,398,117,1671,1411,1236,1728,
                1208,1539,865,1982,38,1036,1290,1453,676,316,1809,40,1690,491,1708,231,728,927,1588,694,1784,758,1273,1373,
                544,845,1860,1465,527,1368,681,968,1680,155,1209,1718,134,1938,183,339,925,361,609,1078,533,438,428,949,418,
                1214,1591,178,152,1321,347,1709,885,1961,399,678,1707,1322,452,754,895,1168,47,1548,1975,41,651,32,471,1910,
                1274,891,120,1541,643,1438,516,247,1598,249,1681,976,707,1264,502,1976,147,1075,1459,669,1448,1756,1846,1885,
                666,1507,1695,335,1446,505,1328,119,1836,717,934,447,1579,411,1056,121,68,1806,466,521,841,1283,793,916,241,271,
                353,1080,1065,1222,602,853,313,171,213,1863,1377,459,814,1015,82,1146,1407,642,1904,1656,1307,880,1986,620,958,
                1386,679,1394,1085,48,1832,777,743,300,1211,613,1495,397,1276,1884,274,1388,1366,1132,1418,571,1390,844,729,1563,
                1152,1018,1169,1192,507,1376,1747,168,43,501,268,365,1286,982,1404,369,60,1074,1427,434,1763,270,783,1816,232,584,
                1090,1334,514,506,883,42,463,357,1936,1815,1812,1443,600,1147,1084,180,49,1124,637,1554,1233,1722,1525,657,172,
                1395,2,862,1595,1925,1031,210,890,126,623,543,1381,1019,1300,1640,1250,1332,1280,943,1466,1009,1772,1477,1295,420,
                887,1611,693,784,1831,30,1750,785,1470,3,691,1266,856,626,1768,833,59,561,1551,1561,1616,1473,1536,216,460,1145,
                1278,1911,130,1298,465,1698,1014,1668,320,145,1814
            };

            int a = 835;
            int b = 1658;
            int x = 1706;

            Assert.AreEqual(11, _solution.MinimumJumps(forbidden, a, b, x));

        }

    }
}